using System;namespace Labb1{    public class Position    {        private int xValue;        public int XValue        {            get { return xValue; }            set { xValue = value; }        }        private int yValue;        public int YValue        {            get { return yValue; }            set { yValue = value; }        }        public Position(int x, int y)        {            xValue = x;            yValue = y;        }        public double Length()        {            return Math.Sqrt(Math.Pow(xValue, 2) + Math.Pow(yValue, 2));        }        public bool Equals(Position p)        {            if (p.xValue == xValue && p.yValue == yValue)            {                return true;            }            return false;        }        public Position Clone()        {
            return new Position(xValue, yValue);        }        public override string ToString()        {            return "(" + xValue + "," + yValue + ")";        }        public static bool operator >(Position p1, Position p2)        {            if (p1.Length() == p2.Length())            {                return (p1.xValue > p2.xValue);            }            return (p1.Length() > p2.Length());        }        public static bool operator <(Position p1, Position p2)        {            return !(p1 > p2);        }        public static Position operator +(Position p1, Position p2)        {
            return new Position(Math.Abs(p1.xValue + p2.xValue), Math.Abs(p1.yValue + p2.yValue));        }        public static Position operator -(Position p1, Position p2)        {
            return new Position(Math.Abs(p1.xValue - p2.xValue), Math.Abs(p1.yValue - p2.yValue));        }        public static double operator %(Position p1, Position p2)        {            return Math.Sqrt(Math.Pow(p1.xValue - p2.xValue, 2) + Math.Pow(p1.yValue - p2.yValue, 2));        }    }}